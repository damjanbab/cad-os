import React, { useCallback } from 'react'; // Import useCallback here

/**
 * Renders a single SVG path
 */
// Add viewInstanceId to props
export default function PathElement({ path, stroke, strokeWidth, strokeDasharray, onPathClick, viewInstanceId, partName, partIndex }) {
  if (!path) return null;

  // Internal handler to call prop and stop propagation
  const handleClick = useCallback((event) => {
    event.stopPropagation(); // Prevent click from bubbling to parent cell
    if (onPathClick) {
      // Pass unique path ID, path object, partName, partIndex, AND viewInstanceId
      onPathClick(path.id, path, partName, partIndex, viewInstanceId);
    }
  }, [onPathClick, path, partName, partIndex, viewInstanceId]); // Add dependencies

  // Handle different path formats
  const pathData = path.data || (typeof path === 'string' ? path : String(path));

  // Use the already unique path.id generated by the processor
  const uniquePathId = path.id;

  // Use vector-effect to keep stroke width consistent regardless of SVG scaling
  return (
    <path
      id={uniquePathId} // Use the unique path.id
      d={pathData}
      stroke={stroke}
      strokeWidth={strokeWidth}
      fill="none"
      strokeDasharray={strokeDasharray}
      style={{ vectorEffect: 'non-scaling-stroke', cursor: 'pointer' }}
      onClick={handleClick} // Use the internal handler
    />
  );
}
