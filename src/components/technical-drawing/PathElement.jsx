import React, { useCallback } from 'react'; // Import useCallback here

/**
 * Renders a single SVG path
 */
// Add viewInstanceId to props
export default function PathElement({ path, stroke, strokeWidth, strokeDasharray, onPathClick, viewInstanceId, partName, partIndex }) {
  if (!path) return null;

  // Internal handler to call prop and stop propagation
  const handleClick = useCallback((event) => {
    event.stopPropagation(); // Prevent click from bubbling to parent cell
    if (onPathClick) {
      // Pass event, unique path ID, path object, partName, partIndex, AND viewInstanceId
      onPathClick(event, path.id, path, partName, partIndex, viewInstanceId);
    }
  }, [onPathClick, path, partName, partIndex, viewInstanceId]); // Add dependencies

  // Handle different path formats
  const pathData = path.data || (typeof path === 'string' ? path : String(path));

  // Use the already unique path.id generated by the processor
  const uniquePathId = path.id;
  // Ensure strokeWidth is a valid number, default to 1 if not
  const validStrokeWidth = typeof strokeWidth === 'number' && !isNaN(strokeWidth) ? strokeWidth : 1;
  const clickTargetStrokeWidth = Math.max(5, validStrokeWidth * 5); // Make click target wider, at least 5 units

  // Prepare data attributes for snapping
  const dataAttributes = {};
  if (path.geometry?.type) {
    dataAttributes['data-geometry-type'] = path.geometry.type;
    if (path.geometry.type === 'line' && path.geometry.endpoints) {
      // Stringify endpoints for the data attribute
      try {
        dataAttributes['data-endpoints'] = JSON.stringify(path.geometry.endpoints);
      } catch (e) {
        console.error("Failed to stringify endpoints for path:", uniquePathId, e);
      }
    }
  }

  // Use vector-effect to keep stroke width consistent regardless of SVG scaling
  return (
    <g>
      {/* Visible Path */}
      <path
        d={pathData}
        stroke={stroke}
        strokeWidth={strokeWidth}
        fill="none"
        strokeDasharray={strokeDasharray}
        style={{ vectorEffect: 'non-scaling-stroke', pointerEvents: 'none' }} // Disable pointer events on visible path
      />
      {/* Invisible Click Target Path */}
      <path
        id={uniquePathId} // ID is now on the click target
        d={pathData}
        stroke="transparent" // Invisible
        strokeWidth={clickTargetStrokeWidth} // Much wider for easier clicking
        fill="none"
        style={{ vectorEffect: 'non-scaling-stroke', cursor: 'pointer' }} // Cursor on the click target
        onClick={handleClick} // Click handler on the click target
        {...dataAttributes} // Spread the data attributes onto the element
      />
    </g>
  );
}
